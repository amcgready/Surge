# ===========================================
# SURGE AUTOMATION & SCHEDULING
# ===========================================

services:
  imagemaid:
    image: kometateam/imagemaid:latest
    container_name: surge-imagemaid
    environment:
      - TZ=${TZ:-UTC}
      - PLEX_PATH=${PLEX_PATH:-/plex}
      - MODE=${IMAGEMAID_MODE:-remove}
      - PLEX_URL=${PLEX_URL:-http://localhost:32400}
      - PLEX_TOKEN=${PLEX_TOKEN:-changeme}
      - DISCORD=${DISCORD_WEBHOOK_URL}
    volumes:
      - imagemaid-config:/config
      - ${PLEX_CONFIG_DIR:-/config/plex}:/plex
    restart: unless-stopped
    networks:
      - surge-network
  kometa:
    image: kometateam/kometa:latest
    container_name: surge-kometa
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-UTC}
      - KOMETA_CONFIG=/config/config.yml
    volumes:
      - ./initial-configs/kometa-config.yml:/config/config.yml
      - shared-assets:/assets
      - shared-logs:/config/logs
      - ${MOVIES_DIR:-./data/media/movies}:/movies
      - ${TV_SHOWS_DIR:-./data/media/tv}:/tv
    restart: "no"
    networks:
      - surge-network
  radarr:
    image: lscr.io/linuxserver/radarr:latest
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
  nzbget:
    image: lscr.io/linuxserver/nzbget:latest
  rdt-client:
    image: rogerfar/rdtclient:latest
  zurg:
    image: ghcr.io/debridmediamanager/zurg-testing:latest
  zilean:
    image: ipromknight/zilean:latest
  cli-debrid:
    image: godver3/cli_debrid:latest
  decypharr:
    image: cy01/blackhole:latest
  cinesync:
    image: sureshfizzy/cinesync:latest
  placeholdarr:
    image: ghcr.io/theindiearmy/placeholdarr:queue_monitoring-latest
  overseerr:
    image: sctx/overseerr:latest
  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: surge-watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=${WATCHTOWER_INTERVAL:-86400}  # 24 hours
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - TZ=${TZ:-UTC}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - surge-network
    profiles:
      - auto-update

  # Cron scheduler for sequential tasks
  scheduler:
    image: alpine:latest
    container_name: surge-scheduler
    environment:
      - TZ=${TZ:-UTC}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - shared-logs:/logs
    command: |
      sh -c '
        # Install docker client
        apk add --no-cache docker-cli

        # Create crontab for sequential execution
        cat > /tmp/crontab << EOF
        # Posterizarr
        # Run daily at 2 AM
            $${ASSET_PROCESSING_SCHEDULE:-0 2 * * *} /usr/local/bin/run-sequence.sh >> /logs/scheduler.log 2>&1

        # Check for updates and notify via Discord
        # Run every 4 hours
        0 */4 * * * /usr/local/bin/check-updates.sh >> /logs/update-check.log 2>&1
        EOF

        # Create sequence script
        cat > /usr/local/bin/run-sequence.sh << "SCRIPT"
        #!/bin/sh
        echo "$(date): Starting asset processing sequence..."
        
        # Step 1: Run Posterizarr
        echo "$(date): Running Posterizarr..."
        docker run --rm --name surge-posterizarr-scheduled \
          --network surge-network \
          -v surge_posterizarr-config:/config \
          -v surge_shared-assets:/assets \
          -v surge_shared-logs:/logs \
          -v $${MOVIES_DIR:-./data/media/movies}:/movies \
          -v $${TV_SHOWS_DIR:-./data/media/tv}:/tv \
          -e PUID=$${PUID:-1000} \
          -e PGID=$${PGID:-1000} \
          -e TZ=$${TZ:-UTC} \
          ghcr.io/fscorrupt/posterizarr:latest
        
        echo "$(date): Posterizarr completed"
        
        # Send completion notification if webhook is configured and processing notifications enabled
        # Discord notification only if webhook is configured and processing notifications enabled
        if [ -n "$${DISCORD_NOTIFY_PROCESSING:-false}" ] && [ "$${DISCORD_NOTIFY_PROCESSING:-false}" = "true" ]; then
            # Install curl if not present
            if ! command -v curl > /dev/null; then
                apk add --no-cache curl
            fi
            
        fi
        
        echo "$(date): Asset processing sequence finished"
        SCRIPT

        # Create update check script
        cat > /usr/local/bin/check-updates.sh << "SCRIPT"
        #!/bin/sh
        echo "$(date): Checking for container updates..."
        
        # Function to send Discord notification
        send_discord_notification() {
            local title="$1"
            local description="$2"
            local color="$${3:-3447003}"
            
            if [ "$${DISCORD_NOTIFY_UPDATES:-false}" != "true" ]; then
                return 0
            fi
            
            local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
            local hostname=$(hostname)
            
            # Install curl if not present
            if ! command -v curl > /dev/null; then
                apk add --no-cache curl
            fi
            
            # Send notification with simple text
        }
        
        # Get list of Surge containers
        containers=$(docker ps --filter "name=surge-" --format "{{.Names}}" 2>/dev/null)
        
        if [ -z "$containers" ]; then
            echo "$(date): No Surge containers found"
            exit 0
        fi
        
        updates_available=""
        
        # Check each container for updates
        echo "$containers" | while read -r container; do
            if [ -n "$container" ]; then
                image=$(docker inspect "$container" --format='{{.Config.Image}}' 2>/dev/null)
                
                if [ -n "$image" ]; then
                    echo "$(date): Checking updates for $container ($image)..."
                    
                    # Get current image ID
                    current_id=$(docker inspect "$image" --format='{{.Id}}' 2>/dev/null)
                    
                    # Pull latest image quietly
                    pull_output=$(docker pull "$image" 2>&1)
                    
                    # Check if image was actually updated
                    if echo "$pull_output" | grep -q "Downloaded newer image"; then
                        updates_available="$updates_availableâ€¢ $container\\n"
                        echo "$(date): Update available for $container"
                    fi
                fi
            fi
        done
        
        # Send notification if updates are available
        if [ -n "$updates_available" ]; then
            send_discord_notification \
                "Container Updates Available" \
                "Updates are available for:\\n\\n$updates_available\\nUse ./surge update to apply updates."
                
            echo "$(date): Updates available - Discord notification sent"
        else
            echo "$(date): All containers are up to date"
        fi
        SCRIPT

        chmod +x /usr/local/bin/run-sequence.sh
        chmod +x /usr/local/bin/check-updates.sh
        
        # Install crontab
        crontab /tmp/crontab
        
        # Start cron in foreground
        crond -f -l 2
      '
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - surge-network
    profiles:
      - scheduler
      - automation



  posterizarr:
    image: ghcr.io/fscorrupt/posterizarr:latest
    container_name: surge-posterizarr
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-UTC}
    volumes:
      - posterizarr-config:/config
      - shared-assets:/assets
      - shared-logs:/logs
      - ${MOVIES_DIR:-./data/media/movies}:/movies
      - ${TV_SHOWS_DIR:-./data/media/tv}:/tv
    ports:
      - "${POSTERIZARR_PORT:-5060}:5060"
    restart: "no"
    networks:
      - surge-network
    profiles:
      - posterizarr

volumes:
  shared-logs:
  shared-assets:
  homepage-config:
  decypharr-config:
  cli-debrid-config:
  cinesync-config:
  placeholdarr-config:
  posterizarr-config:
  radarr-config:
  sonarr-config:
  bazarr-config:
  prowlarr-config:
  nzbget-config:
  rdt-client-config:
  zurg-config:
  zilean-config:
  overseerr-config:
  tautulli-config:
  emby-config:
  jellyfin-config:
  plex-config:
  imagemaid-config:
  kometa-config:
  watchtower-config:
  scheduler-config:

networks:
  surge-network:
    name: surge-network
    driver: bridge
