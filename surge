#!/bin/bash

# ===========================================
# SURGE - Simple Wrapper Script
# ===========================================

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
DARK_BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_banner() {
    printf "\n"
    printf "\033[0;36m  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó \033[38;5;32m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\033[0m\n"
    printf "\033[0;36m  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó\033[38;5;32m‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù\033[0;36m ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù\033[0m\n"
    printf "\033[0;36m  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë\033[38;5;32m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó\033[0;36m‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\033[0m\n"
    printf "\033[38;5;32m  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë\033[0;36m‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù\033[0m\n"
    printf "\033[38;5;32m  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù\033[0;36m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\033[0m\n"
    printf "\033[38;5;32m  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù \033[0;36m‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\033[0m\n"
    printf "\n"
    printf "  üåä Unified Media Management Stack\n"
    printf "\n"
}

show_help() {
    echo "Surge - Unified Media Management Stack"
    echo ""
    echo "Usage: ./surge [COMMAND] [OPTIONS]"
    echo ""
    echo "Setup Commands:"
    echo "  setup                    - Run interactive setup wizard"
    echo "  setup --auto            - Quick auto setup with defaults"
    echo "  setup --custom          - Custom setup with full control"
    echo "  setup --reconfigure     - Reconfigure existing installation"
    echo "  deploy <server>         - Deploy Surge with specified media server"
    echo "                           Options: plex, emby, jellyfin"
    echo ""
    echo "Configuration Commands:"
    echo "  auto-config             - Automatically configure service connections"
    echo "  auto-config --service S - Configure specific service only"
    echo "  auto-config --discover  - Discover API keys without configuring"
    echo "  post-config             - Run post-deployment configuration"
    echo "  troubleshoot            - Diagnose API connection issues"
    echo "  api-keys                - Manage API keys (discover, configure)"
    echo "  inject-keys             - Generate and inject API keys into configs"
    echo "  fix-ownership [path]    - Fix directory ownership for Docker containers"
    echo "  configure-overseerr     - Configure Overseerr with service API keys"
    echo ""
    echo "Management Commands:"
    echo "  --update                - Update all containers to latest versions"
    echo "  --update --check        - Check for updates without applying them"
    echo "  --update --force        - Force update even if no updates detected"
    echo "  --update --monitor-start - Start background update monitoring"
    echo "  status                  - Show status of all services"
    echo "  logs [service]          - View logs (all services or specific service)"
    echo "  restart                 - Restart all services"
    echo "  stop                    - Stop all services"
    echo "  cleanup                 - Clean up Docker system"
    echo "  health                  - Perform health check"
    echo "  reset <service>         - Reset a specific service"
    echo ""
    echo "Command-Line Access:"
    echo "  exec <service>   - Execute commands in service containers"
    echo "                     Examples:"
    echo "                       ./surge exec scanly shell"
    echo "                       ./surge exec radarr"
    echo ""
    echo "Asset Processing:"
    echo "  process sequence      - Run ImageMaid ‚Üí Posterizarr ‚Üí Kometa in order"
    echo "  process run <service> - Run individual service"
    echo "  process schedule      - Show processing schedule"
    echo "  process logs          - View processing logs"
    echo ""
    echo "Configuration:"
    echo "  config setup              - Setup shared variables (Discord, TMDB, etc.)"
    echo "  config update             - Update all service configs with shared variables"
    echo "  config notifications      - Configure Discord notification preferences"
    echo "  config check-updates      - Check for container updates and notify"
    echo "  config test-webhook       - Test Discord webhook notifications"
    echo ""
    echo "Quick Start:"
    echo "  1. Run: ./surge setup"
    echo "  2. Deploy: ./surge deploy <media-server>"
    echo "  3. Access: http://localhost:3000"
    echo ""
    echo "Command-Line Tools:"
    echo "  ./surge exec scanly scan      # Run media scan"
    echo "  ./surge exec scanly organize  # Organize files"
    echo "  ./surge exec kometa '--run'   # Run metadata update"
    echo ""
    echo "Features:"
    echo "  ‚úÖ First-time setup wizard"
    echo "  ‚úÖ Request management with Overseerr"
    echo "  ‚úÖ Indexer management with Prowlarr + Torrentio"
    echo "  ‚úÖ Automatic updates (Watchtower)"
    echo "  ‚úÖ Scheduled asset processing"
    echo "  ‚úÖ Shared assets folder for all services"
    echo "  ‚úÖ Command-line tool access"
    echo "  ‚úÖ Sequential processing (ImageMaid ‚Üí Posterizarr ‚Üí Kometa)"
    echo ""
}

# Route commands to appropriate scripts
case ${1:-} in
    setup)
        exec "$SCRIPT_DIR/scripts/first-time-setup.sh" "${@:2}"
        ;;
    deploy)
        if [ -z "$2" ]; then
            echo -e "${RED}Error:${NC} Media server not specified"
            echo "Usage: ./surge deploy <plex|emby|jellyfin>"
            exit 1
        fi
        exec "$SCRIPT_DIR/scripts/deploy.sh" "$2" "${@:3}"
        ;;
    auto-config)
        exec "$SCRIPT_DIR/scripts/auto-config.sh" "${@:2}"
        ;;
    post-config)
        exec "$SCRIPT_DIR/scripts/post-deploy-config.sh" "${@:2}"
        ;;
    troubleshoot)
        exec "$SCRIPT_DIR/scripts/troubleshoot-api.sh" "${@:2}"
        ;;
    api-keys)
        exec python3 "$SCRIPT_DIR/scripts/api-key-manager.py" "${@:2}"
        ;;
    inject-keys)
        exec python3 "$SCRIPT_DIR/scripts/inject-api-keys.py" "${@:2}"
        ;;
    fix-ownership)
        exec "$SCRIPT_DIR/scripts/fix-ownership.sh" "${@:2}"
        ;;
    configure-overseerr)
        exec python3 "$SCRIPT_DIR/scripts/configure-overseerr.py" "${@:2}"
        ;;
    exec)
        if [ -z "$2" ]; then
            echo -e "${RED}Error:${NC} Service not specified"
            echo "Usage: ./surge exec <service> [command]"
            echo "Run './surge exec services' to see available services"
            exit 1
        fi
        exec "$SCRIPT_DIR/scripts/exec.sh" "${@:2}"
        ;;
    update|--update)
        exec "$SCRIPT_DIR/scripts/update.sh" "${@:2}"
        ;;
    status|logs|restart|cleanup|health|reset)
        exec "$SCRIPT_DIR/scripts/maintenance.sh" "$@"
        ;;
    process)
        exec "$SCRIPT_DIR/scripts/process-assets.sh" "${@:2}"
        ;;
    config)
        if [ -z "$2" ]; then
            echo -e "${RED}Error:${NC} Config command not specified"
            echo "Usage: ./surge config <setup|update|notifications|check-updates|test-webhook>"
            exit 1
        fi
        exec "$SCRIPT_DIR/scripts/shared-config.sh" "${@:2}"
        ;;
    stop)
        exec "$SCRIPT_DIR/scripts/deploy.sh" --stop
        ;;
    help|-h|--help)
        print_banner
        show_help
        ;;
    "")
        # Check if setup is needed
        if [ ! -f "$SCRIPT_DIR/.surge_initialized" ]; then
            print_banner
            echo -e "${YELLOW}Welcome to Surge!${NC}"
            echo ""
            echo "It looks like this is your first time running Surge."
            echo "Let's get you set up:"
            echo ""
            echo "  ./surge setup    # Run the setup wizard"
            echo ""
            echo "Or if you prefer manual setup:"
            echo "  cp .env.example .env"
            echo "  # Edit .env with your preferences"
            echo "  ./surge deploy plex"
        else
            print_banner
            show_help
        fi
        ;;
    *)
        echo -e "${RED}Error:${NC} Unknown command: $1"
        echo "Run './surge help' for usage information"
        exit 1
        ;;
esac
